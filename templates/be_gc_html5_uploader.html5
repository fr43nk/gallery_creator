<h3><label><?php echo $GLOBALS['TL_LANG']['tl_gallery_creator_albums']['fileupload'][0]; ?></label></h3>
<input type="file" name="image" accept="image/jpg,image/jpeg" id="filesToUpload" multiple>
<p class="tl_help tl_tip" title=""><?php echo $GLOBALS['TL_LANG']['tl_gallery_creator_albums']['fileupload'][1]; ?></p>
<br><br>
<button type="button" id="btn" onclick="javascript:objUpload.initUpload(); return false;">Upload</button>
<button type="button" id="btn" onclick="javascript:objUpload.resetForm(); objUpload.resetList(); return false;">Reset
</button>

<br><br>
<ul id="fileList"></ul>


<?php $url = sprintf("contao/main.php?do=gallery_creator&id=%s&act=edit&table=tl_gallery_creator_albums&mode=fileupload&rt=%s", $this->Input->get('id'), REQUEST_TOKEN); ?>

<script>
    window.addEvent('domready', function () {
        objUpload = new Html5Upload({
            url: '<?php echo $url; ?>',
            form_submit: 'tl_gallery_creator_albums',
            request_token: '<?php echo REQUEST_TOKEN; ?>',
            be_user_auth: '<?php echo $_COOKIE["BE_USER_AUTH"]; ?>',
            inputId: 'filesToUpload',
            fileListId: 'fileList'
        });
    });
</script>


<script>
    /**
     * Mootools Class to handle fileuploads
     * @type {Class}
     * @author Marko Cupic
     */
    Html5Upload = new Class({
        Implements: [Options, Events],
        options: {
            // mandatory options
            url: null,
            request_token: null,
            form_submit: null,
            be_user_auth: null,
            inputId: null,
            fileListId: null,

            // options that are set by the system
            _files: null
        },

        initialize: function (options) {
            var self = this;
            this.setOptions(options);
            var input = this.get('input');
            document.id(this.get('inputId')).addEvent('change', function () {
                self.listSelectedFiles();
            });
        },

        get: function (option) {
            if (this.options[option]) {
                return this.options[option];
            } else {
                return null;
            }
        },

        set: function (option, value) {
            if (option != '') {
                this.options[option] = value;
            }
        },

        listSelectedFiles: function () {

            var inputEl = document.id(this.get('inputId'));
            this.set('_files', inputEl.files);

            //inject a list element for every file
            this.resetList();
            var ul = document.id(this.get('fileListId'));
            var files = this.getFiles();
            for (var i = 0; i < files.length; i++) {
                //add to list
                var li = new Element('li',
                        {
                            id: 'upload_' + i,
                            'class': 'tl_confirm listview',
                            html: 'File ' + (i + 1) + ':  ' + files[i].name + ' (' + Math.round(files[i].size / 1000) + ' kb)'
                        }
                );
                li.inject(ul);
            }
        },

        getFiles: function () {
            return this.get('_files');
        },

        initUpload: function () {
            if (!this.getFiles() || this.getFiles().length == 0) {
                alert('Please select at least 1 file!');
                return;
            }
            this.upload('0');
        },

        upload: function (index) {
            var self = this;
            if (!index) {
                index = '0';
            }

            // if all files are loaded
            if (index >= this.getFiles().length) {
                this.resetForm();
                return false;
            }

            // create the file object
            var objFile = this.getFiles()[index];

            if (!objFile) {
                nextIndex = parseInt(index) + 1;
                this.upload(nextIndex);
            }

            // prepare the form object
            var objForm = new FormData();
            objForm.append("FORM_SUBMIT", this.get('form_submit'));
            objForm.append("REQUEST_TOKEN", this.get('request_token'));
            objForm.append("BE_USER_AUTH", this.get('be_user_auth'));
            objForm.requestId = index;
            objForm.append("requestId", index);
            objForm.append("file", objFile);

            // prepare the xhr object
            var xhr = new XMLHttpRequest();
            xhr.requestId = index;
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    // get the server-response
                    var json = JSON.decode(xhr.responseText);
                    json.requestId = (!json.requestId) ? '0' : json.requestId;

                    // if error
                    if (json.status == 'error') {
                        document.id('upload_' + json.requestId).innerHTML = json.serverResponse;
                        document.id('upload_' + json.requestId).addClass('error');
                        document.id('upload_' + xhr.requestId).removeClass('tl_confirm');
                        document.id('upload_' + xhr.requestId).removeClass('onprogress');
                    }

                    // if success
                    if (json.status == 'success') {
                        document.id('upload_' + json.requestId).innerHTML = json.serverResponse;
                        document.id('upload_' + xhr.requestId).removeClass('onprogress');
                    }

                    // Send next file to server
                    var nextIndex = parseInt(this.requestId) + 1;
                    self.upload(nextIndex);
                }
            }

            // open and send xhr
            xhr.open("POST", this.get('url'), true);
            xhr.send(objForm);
            document.id('upload_' + index).addClass('onprogress');
            document.id('upload_' + index).removeClass('listview');
        },

        resetForm: function () {
            document.id(this.get('inputId')).value = null;
        },

        resetList: function () {
            $$('#' + this.get('fileListId') + ' li').each(function (el, index) {
                el.destroy();
            });
        }
    });

</script>