<div class="html5_uploader">
    <div class="block">
        <div id="uploadDropArea" style="display:none">
            <div>Drag images here or <br>...browse files.</div>
        </div>
    </div>
    <noscript>
        <p>Please enable Javascript in your browser for full function volume.</p>
        <input type="file" name="file[]" multiple>
        <input type="hidden" name="BE_USER_AUTH" value="<?php echo $this->beUserAuth; ?>">
        <input type="submit" name="submit" value="submit">
    </noscript>
</div>

<?php $url = sprintf("contao/main.php?do=gallery_creator&id=%s&act=edit&table=tl_gallery_creator_albums&mode=fileupload&rt=%s", $this->Input->get('id'), REQUEST_TOKEN); ?>

<script>
    window.addEvent('domready', function () {
        // Hide the image-quality input select field
        if ($$('#pal_upload_settings > div.w50')[1]) {
            $$('#pal_upload_settings > div.w50')[1].setStyle('visibility', 'hidden');
        }

        var uploader = new Html5Upload({
            url: '<?php echo $url; ?>',
            acceptedFileTypes: 'image/jpg,image/jpeg'
        });
        // append a few post params
        uploader.setPost("FORM_SUBMIT", 'tl_gallery_creator_albums');
        uploader.setPost("REQUEST_TOKEN", '<?php echo $this->requestToken; ?>');
        uploader.setPost("BE_USER_AUTH", '<?php echo $this->beUserAuth; ?>');
        // serverside image resizing
        uploader.setPost("img_resolution", document.id('ctrl_img_resolution').value);
    });
</script>


<script>
/**
 * Mootools Class to handle fileuploads
 * @type {Class}
 * @author Marko Cupic
 */
Html5Upload = new Class({
    Implements: [Options, Events],
    options: {
        // mandatory argument
        url: null,
        // optional arguments
        allowedFileTypes: null,
        // simultaneous requests
        simultaneousRequests: 3

    },

    // HTML DIV Object
    uploadDropArea: {},
    // HTML file Input Object
    fileInput: {},
    // HTML List Object
    uploadList: {},
    // post params
    _post: {},
    // selected file list
    _files: [],
    // last fired request-id
    recentRequestId: null,
    //count running requests
    currentRequests: 0,
    // upload timer
    uploadTimer: null,
    // xhr
    xhr: {},
    // bool files selected
    blnFormSubmitted: false,

    initialize: function (options) {
        var self = this;
        this.setOptions(options);

        // check for uploadDropArea in the html markup
        if (!document.id('uploadDropArea')) {
            alert('Error: Add a uploadDropArea (<div id="uploadDropArea">...browse files</div>) to the html markup!')
        }
        this.uploadDropArea = document.id('uploadDropArea');
        this.uploadDropArea.setStyle('display', 'block');

        // check for the url option
        if (!this.getOption('url')) {
            alert('Error: url option is missing!')
        }

        // inject the hidden file input field
        this.fileInput = new Element('input');
        this.fileInput.setProperties({
            type: 'file',
            multiple: 'multiple',
            id: 'filesToUpload'
        });
        if (this.getOption('acceptedFileTypes')) {
            this.fileInput.setProperty('accept', this.getOption('acceptedFileTypes'));
        }
        this.fileInput.setStyle('display', 'none');
        this.fileInput.inject(this.uploadDropArea, 'top');

        // inject the buttons
        var buttonBox = new Element('div', {
            'class': 'buttonBox'
        });
        buttonBox.inject(this.uploadDropArea, 'after');

        var buttonReset = new Element('button', {
            type: 'button',
            'class': 'button reset',
            id: 'reset_btn',
            html: 'Reset'
        });
        buttonReset.inject(buttonBox, 'top');

        var buttonUpload = new Element('button', {
            type: 'button',
            'class': 'button upload',
            id: 'upload_btn',
            html: 'Upload'
        });
        buttonUpload.inject(buttonBox);

        // inject the upload list
        this.uploadList = new Element('ul', {
            id: 'uploadList'
        });
        this.uploadList.inject(buttonBox, 'after');


        // add the Events to the uploadDropArea
        this.uploadDropArea.addEvent('click', function (event) {
            event.stopPropagation();
            self.resetForm();
            self.fileInput.click();
        });


        this.uploadDropArea.addEventListener("dragenter", function (event) {
            event.stopPropagation();
            event.preventDefault();
        }, false);

        this.uploadDropArea.addEventListener("dragover", function (event) {
            event.stopPropagation();
            event.preventDefault();
        }, false);

        this.uploadDropArea.addEventListener("drop", function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.resetForm();
            self.clearList();
            self.addFiles(event.dataTransfer.files);
            self.listSelectedFiles();
        }, false);

        // add event to the hidden file input field
        this.fileInput.addEvent('change', function (event) {
            self.addFiles(self.fileInput.files);
            self.listSelectedFiles();
        });

        // add event to the reset button
        document.id('reset_btn').addEvent('click', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.resetForm();
            self.clearList();
        });

        // add event to the upload button
        document.id('upload_btn').addEvent('click', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.initUpload();
        });
    },

    listSelectedFiles: function () {

        this.blnFormSubmitted = false;

        //inject a list element for every file
        this.clearList();
        var ul = document.id('uploadList');
        var files = this.getFiles();
        for (var i = 0; i < files.length; i++) {
            //add to list
            var li = new Element('li', {
                id: 'upload_' + i,
                'class': 'uploadlist',
                html: 'File ' + (i + 1) + ':  ' + files[i].name + ' (' + Math.round(files[i].size / 1000) + ' kb) <span class="progress"></span>'
            });
            li.inject(ul);
        }
    },

    initUpload: function () {
        var self = this;

        // prevent multiple form submit
        if (this.blnFormSubmitted === true) {
            alert('Please select some new/different files for the upload!');
            return;
        }
        this.blnFormSubmitted = true;

        if (!this.getFiles() || this.getFiles().length == 0 || !this.getFiles().length) {
            alert('Please select at least 1 file!');
            return;
        }

        // fire uploads
        this.upload();
        this.uploadTimer = (function () {
            if (self.currentRequests < self.getOption('simultaneousRequests')) {
                self.upload();
            }
        }.periodical(2000));
    },

    upload: function () {
        var self = this;

        if (this.recentRequestId === null) {
            this.recentRequestId = 0;
        } else {
            this.recentRequestId++;
        }
        var index = this.recentRequestId;

        if (!index) {
            index = '0';
        }

        // if all files are loaded
        if (index >= this.getFiles().length) {
            // stop firing requests
            return;
        }

        // create the file object
        var objFile = this.getFiles()[index];

        // increase request counter by 1
        this.currentRequests++;

        // prepare the form object
        var objForm = new FormData();
        Object.each(self._post, function (value, key) {
            objForm.append(key, value);
        });

        objForm.append("file", objFile);

        // prepare the xhr object
        var xhr = new XMLHttpRequest();
        this.xhr[index] = xhr;
        xhr.requestId = index;

        // onprogress event
        xhr.upload.addEventListener("progress", function (event) {
            if (event.lengthComputable) {
                var percentComplete = event.loaded / event.total * 100;
                if ($$('li#upload_' + xhr.requestId + ' .progress')[0]) {
                    $$('li#upload_' + xhr.requestId + ' .progress')[0].innerHTML = ' Progress: ' + Math.round(percentComplete) + '%';
                }
            } else {
                //
            }
        }, false);

        // onload event
        xhr.addEventListener("load", function (event) {
            self.transferComplete(event, xhr);
        }, false);

        // onerror event
        xhr.addEventListener("error", function (event) {
            self.currentRequests--;
            alert('Upload-error! Please check connectivity.');
        }, false);

        // onabort event
        xhr.addEventListener("abort", function (event) {
            self.currentRequests--;
        }, false);

        // open and send xhr
        xhr.open("POST", this.getOption('url'), true);

        // send request
        xhr.send(objForm);
        document.id('upload_' + xhr.requestId).addClass('onprogress');
    },

    transferComplete: function (event, xhr) {
        this.currentRequests--;
        // get the server-response
        var json = JSON.decode(xhr.responseText);
        // if server returns error
        if (json.status == 'error') {
            document.id('upload_' + xhr.requestId).innerHTML = json['serverResponse'];
            document.id('upload_' + xhr.requestId).addClass('error');
            document.id('upload_' + xhr.requestId).removeClass('tl_confirm');
            document.id('upload_' + xhr.requestId).removeClass('onprogress');
        }

        // if server returns success
        if (json.status == 'success') {
            document.id('upload_' + xhr.requestId).innerHTML = json['serverResponse'];
            document.id('upload_' + xhr.requestId).removeClass('onprogress');
            document.id('upload_' + xhr.requestId).addClass('loaded');

        }
    },

    resetForm: function () {
        var self = this;
        this.fileInput.value = null;
        clearInterval(this.uploadTimer);
        this.abortAllRequests();
        this.recentRequestId = null;
        this.currentRequests = 0;
    },

    clearList: function () {
        this.uploadList.getChildren('li').each(function (el) {
            el.destroy();
        });
    },

    abortAllRequests: function () {
        var self = this;
        // abort all open requests
        Object.each(self.xhr, function (objXHR, key, obj) {
            objXHR.abort();
            objXHR = null;
        });
        this.xhr = {};
    },

    getOption: function (option) {
        if (this.options[option]) {
            return this.options[option];
        } else {
            return null;
        }
    },

    // set class property
    set: function (index, value) {
        this[index] = value;
    },

    // get class property
    get: function (index) {
        if (this[index]) {
            return this[index];
        } else {
            return null;
        }
    },

    // add files to the _files array
    addFiles: function (objFiles) {
        var self = this;
        if (typeof objFiles == 'object' && objFiles !== null) {
            if (objFiles.length > 0) {
                self._files = [];
                var i = 0;
                for (var key in objFiles) {

                    if (typeof objFiles[key] == 'object') {
                        self._files[i] = objFiles[key];
                        i++;
                    }
                }
            }
        }
        this.fileInput.value = null;
    },

    // get the file array (selected files)
    getFiles: function (objFiles) {
        return this._files;
    },

    // set post param
    setPost: function (index, value) {
        this._post[index] = value;
    },

    // get post param
    getPost: function (index) {
        if (this._post[index]) {
            return this._post[index];
        } else {
            return null;
        }
    }
});

</script>